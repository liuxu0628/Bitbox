package unimelb.bitbox;

import unimelb.bitbox.util.Document;
import unimelb.bitbox.util.HostPort;

import javax.crypto.spec.SecretKeySpec;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.Base64;

public class DisconnectPeer {

    private Socket socket;
    private SecretKeySpec sessionKey;
    private HostPort hostPort;


    /**
     * This is the constructor of this class.
     *
     * @param socket     The socket between Client and the Peer which you are controlling.
     * @param sessionKey The sessionKey which generated by authentication process.
     * @param hostPort   The host and port of the intended peer.
     */
    public DisconnectPeer(Socket socket, String sessionKey, HostPort hostPort) {
        this.socket = socket;
        this.sessionKey = AES.getKey(sessionKey);
        this.hostPort = hostPort;
    }


    public void DisconnectPeer_request() throws IOException, NullPointerException {
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), "UTF8"));

        Document payload = new Document();
        payload.append("command", "DISCONNECT_PEER_REQUEST");
        payload.append("host", hostPort.host);
        payload.append("port", hostPort.port);

        String content = AES.Session_encrypt(payload.toJson(), sessionKey);

        content = Base64.getEncoder().encodeToString(content.getBytes());

        // This is the final request message.
        Document req = new Document();
        req.append("payload", content);

        bw.write(req.toJson() + "\n");
        bw.flush();

    }

    /**
     * @param status The status of the intend connection.
     * @throws IOException The mandatory exception when using I/O stream.
     */
    public void DisconnectPeer_response(boolean status) throws IOException {
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), "UTF8"));

        Document payload = new Document();
        payload.append("command", "DISCONNECT_PEER_RESPONSE");
        payload.append("host", hostPort.host);
        payload.append("port", hostPort.port);
        payload.append("status", status);

        String message = status ? "disconnected from peer" : "connection not active";

        payload.append("message", message);

        String content = AES.Session_encrypt(payload.toJson(), sessionKey);

        content = Base64.getEncoder().encodeToString(content.getBytes());

        // This is the final response message.
        Document res = new Document();
        res.append("payload", content);

        bw.write(res.toJson() + "\n");
        bw.flush();
    }
}
